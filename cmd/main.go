package main

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

var (
	jwtSecret = []byte("your-secret-key") // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
)

// Claims —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JWT
type Claims struct {
	Username string `json:"username"`
	jwt.RegisteredClaims
}

// User —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct {
	Username string `json:"username"`
	Password string `json:"password"` // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏—Ç–µ —Ö–µ—à –ø–∞—Ä–æ–ª—è
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ—Ñ—Ä–µ—à-—Ç–æ–∫–µ–Ω–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
var refreshTokens = make(map[string]time.Time)

func main() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
	http.Handle("/login", requirePOST(http.HandlerFunc(loginHandler)))
	http.Handle("/logout", requirePOST(http.HandlerFunc(logoutHandler)))
	http.Handle("/refresh", requirePOST(http.HandlerFunc(refreshHandler)))
	http.Handle("/user/me", requireAuth(http.HandlerFunc(userHandler)))

	// –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080
	port := ":8080"
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost%s", port)
	err := http.ListenAndServe(port, nil)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
func requirePOST(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
			return
		}
		next(w, r)
	}
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
func requireAuth(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		authHeader := r.Header.Get("Authorization")
		if authHeader == "" {
			http.Error(w, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", http.StatusUnauthorized)
			return
		}

		tokenString := strings.TrimPrefix(authHeader, "Bearer ")
		claims := &Claims{}

		token, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {
			return jwtSecret, nil
		})

		if err != nil || !token.Valid {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω", http.StatusUnauthorized)
			return
		}

		next(w, r)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /login
func loginHandler(w http.ResponseWriter, r *http.Request) {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	var user User
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}

	if user.Username != "testuser" || user.Password != "testpass" {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusUnauthorized)
		return
	}

	// –°–æ–∑–¥–∞–µ–º access —Ç–æ–∫–µ–Ω
	accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, Claims{
		Username: user.Username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(15 * time.Minute)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	})

	accessTokenString, err := accessToken.SignedString(jwtSecret)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º refresh —Ç–æ–∫–µ–Ω
	refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, Claims{
		Username: user.Username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	})

	refreshTokenString, err := refreshToken.SignedString(jwtSecret)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
	refreshTokens[refreshTokenString] = time.Now().Add(24 * time.Hour)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"access_token":  accessTokenString,
		"refresh_token": refreshTokenString,
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /logout
func logoutHandler(w http.ResponseWriter, r *http.Request) {
	var request struct {
		RefreshToken string `json:"refresh_token"`
	}

	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}

	// –£–¥–∞–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω
	delete(refreshTokens, request.RefreshToken)

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /refresh
func refreshHandler(w http.ResponseWriter, r *http.Request) {
	var request struct {
		RefreshToken string `json:"refresh_token"`
	}

	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω–∞
	claims := &Claims{}
	token, err := jwt.ParseWithClaims(request.RefreshToken, claims, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})

	if err != nil || !token.Valid {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω", http.StatusUnauthorized)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh —Ç–æ–∫–µ–Ω–∞
	if expTime, exists := refreshTokens[request.RefreshToken]; !exists || time.Now().After(expTime) {
		http.Error(w, "Refresh —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", http.StatusUnauthorized)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
	delete(refreshTokens, request.RefreshToken)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
	accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, Claims{
		Username: claims.Username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(15 * time.Minute)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	})

	accessTokenString, err := accessToken.SignedString(jwtSecret)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
	newRefreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, Claims{
		Username: claims.Username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	})

	newRefreshTokenString, err := newRefreshToken.SignedString(jwtSecret)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
	refreshTokens[newRefreshTokenString] = time.Now().Add(24 * time.Hour)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"access_token":  accessTokenString,
		"refresh_token": newRefreshTokenString,
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /user/me
func userHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º claims –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
	// –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"username": "testuser",
		"email":    "test@example.com",
		"role":     "user",
	})
}
